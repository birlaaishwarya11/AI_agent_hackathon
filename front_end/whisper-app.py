import requests
import streamlit as st
import whisper
import tempfile
import os
from datetime import datetime
from fpdf import FPDF
import io

# Page configuration
st.set_page_config(
    page_title="Healthcare Multilingual Voice Assistant",
    page_icon="üè•",
    layout="centered",
    initial_sidebar_state="collapsed"
)

if 'session_id' not in st.session_state:
    st.session_state.session_id = None

# Load external CSS file
def load_css(file_path):
    """Load CSS from external file"""
    try:
        with open(file_path, 'r') as f:
            css = f.read()
        st.markdown(f'<style>{css}</style>', unsafe_allow_html=True)
    except FileNotFoundError:
        st.warning(f"CSS file not found: {file_path}")

# Load the CSS file
load_css('styles_1.css')

# Initialize session state
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'current_transcription' not in st.session_state:
    st.session_state.current_transcription = None
if 'current_translation' not in st.session_state:
    st.session_state.current_translation = None
if 'current_language' not in st.session_state:
    st.session_state.current_language = None
if 'timestamp' not in st.session_state:
    st.session_state.timestamp = None

# PDF Generation Function
def generate_pdf(transcription_text, translation_text, language, timestamp):
    """Generate a formatted PDF medical document"""
    pdf = FPDF()
    pdf.add_page()
    
    # Header
    pdf.set_font('Arial', 'B', 20)
    pdf.set_text_color(25, 118, 210)
    pdf.cell(0, 15, 'Healthcare Voice Assistant', 0, 1, 'C')
    
    pdf.set_font('Arial', '', 12)
    pdf.set_text_color(128, 128, 128)
    pdf.cell(0, 8, 'Medical Transcription Record', 0, 1, 'C')
    
    # Separator line
    pdf.set_draw_color(200, 200, 200)
    pdf.line(20, 40, 190, 40)
    pdf.ln(5)
    
    # Document Information
    pdf.set_font('Arial', 'B', 10)
    pdf.set_text_color(0, 0, 0)
    pdf.cell(40, 8, 'Date & Time:', 0, 0)
    pdf.set_font('Arial', '', 10)
    pdf.cell(0, 8, datetime.now().strftime("%B %d, %Y - %I:%M %p"), 0, 1)
    
    pdf.set_font('Arial', 'B', 10)
    pdf.cell(40, 8, 'Language:', 0, 0)
    pdf.set_font('Arial', '', 10)
    pdf.cell(0, 8, language, 0, 1)
    
    pdf.set_font('Arial', 'B', 10)
    pdf.cell(40, 8, 'Timestamp:', 0, 0)
    pdf.set_font('Arial', '', 10)
    pdf.cell(0, 8, timestamp, 0, 1)
    
    pdf.ln(5)
    pdf.line(20, pdf.get_y(), 190, pdf.get_y())
    pdf.ln(10)
    
    # Original Transcription Section
    pdf.set_fill_color(232, 245, 233)
    pdf.set_font('Arial', 'B', 14)
    pdf.set_text_color(0, 121, 107)
    pdf.cell(0, 10, 'Patient Communication (Original Language)', 0, 1, 'L', True)
    pdf.ln(3)
    
    pdf.set_font('Arial', '', 11)
    pdf.set_text_color(0, 0, 0)
    pdf.multi_cell(0, 7, transcription_text)
    pdf.ln(8)
    
    # Translation Section (if available)
    if translation_text and translation_text != transcription_text:
        pdf.set_fill_color(255, 243, 224)
        pdf.set_font('Arial', 'B', 14)
        pdf.set_text_color(230, 81, 0)
        pdf.cell(0, 10, 'English Translation (For Medical Records)', 0, 1, 'L', True)
        pdf.ln(3)
        
        pdf.set_font('Arial', '', 11)
        pdf.set_text_color(0, 0, 0)
        pdf.multi_cell(0, 7, translation_text)
        pdf.ln(8)
    
    # Footer
    pdf.ln(10)
    pdf.line(20, pdf.get_y(), 190, pdf.get_y())
    pdf.ln(5)
    
    pdf.set_font('Arial', 'I', 9)
    pdf.set_text_color(128, 128, 128)
    pdf.multi_cell(0, 5, 
        'CONFIDENTIAL MEDICAL RECORD\n'
        'This document is HIPAA compliant and contains confidential patient information.\n'
        'Generated by Healthcare Voice Assistant - Powered by OpenAI Whisper',
        0, 'C')
    
    # Return PDF as bytes
    return pdf.output(dest='S').encode('latin-1')

# Header Section
st.markdown('<h1 class="main-title">üè• DAN.AI Healthcare Voice Assistant</h1>', unsafe_allow_html=True)
st.markdown('<p class="subtitle">Multilingual Medical Communication Platform</p>', unsafe_allow_html=True)
st.markdown('<div class="text-center"><span class="header-badge">‚úì HIPAA Compliant ‚Ä¢ Secure ‚Ä¢ Private</span></div>', unsafe_allow_html=True)

# Load model with caching
@st.cache_resource
def load_whisper_model():
    return whisper.load_model("base")

with st.spinner("üîÑ Loading AI model..."):
    model = load_whisper_model()

languages = {
    "Auto Detect": None,
    "English": "en",
    "Spanish": "es",
    "French": "fr",
    "Mandarin Chinese": "zh",
    "German": "de",
    "Arabic": "ar",
    "Russian": "ru",
    "Japanese": "ja",
    "Korean": "ko",
    "Italian": "it",
    "Portuguese": "pt",
    "Dutch": "nl",
    "Hindi": "hi",
    "Swedish": "sv",
    "Vietnamese": "vi",
    "Polish": "pl",
    "Turkish": "tr",
    "Ukrainian": "uk",
    "Czech": "cs",
    "Finnish": "fi",
    "Hebrew": "he",
    "Greek": "el",
    "Hungarian": "hu",
    "Norwegian": "no",
    "Danish": "da",
    "Romanian": "ro",
    "Swahili": "sw",
    "Latvian": "lv",
    "Estonian": "et",
    "Bengali": "bn"
}

# Sidebar with information
with st.sidebar:
    st.markdown("### üìã How to Use")
    st.markdown("""
    1. **Select Language**: Choose patient's primary language
    2. **Record Audio**: Click microphone to record
    3. **Review**: Check transcription and translation
    4. **Save PDF**: Download formatted medical record
    5. **Restart**: Clear and start new session
    """)
    
    st.markdown("---")
    st.markdown("### üîí Privacy & Security")
    st.markdown("""
    - End-to-end encryption
    - No data retention
    - HIPAA compliant
    - Secure processing
    """)
    
    st.markdown("---")
    st.markdown("### ‚ÑπÔ∏è Support")
    st.markdown("For technical assistance, contact IT support.")
    
    st.markdown("---")
    # Restart button in sidebar
    if st.button("üîÑ Restart Session", use_container_width=True):
        st.session_state.current_transcription = None
        st.session_state.current_translation = None
        st.session_state.current_language = None
        st.session_state.timestamp = None
        st.rerun()

# Main Interface
st.markdown("---")

# Language Selection
st.markdown('<div class="language-selector-container">', unsafe_allow_html=True)
st.markdown('<p class="section-header">üåç Patient Language Selection</p>', unsafe_allow_html=True)

col1, col2 = st.columns([3, 1])
with col1:
    selected_language_name = st.selectbox(
        "Choose patient's primary language",
        list(languages.keys()),
        label_visibility="collapsed"
    )
with col2:
    st.markdown('<div style="padding-top: 8px;">', unsafe_allow_html=True)
    if selected_language_name != "Auto Detect":
        st.markdown(f'<div class="status-indicator"><div class="status-dot"></div>Active</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

selected_language_code = languages[selected_language_name]
st.markdown('</div>', unsafe_allow_html=True)

# Audio Recording Section
st.markdown('<div class="audio-section">', unsafe_allow_html=True)
st.markdown('<p class="section-header">üé§ Voice Recording</p>', unsafe_allow_html=True)
st.markdown('<p class="text-muted" style="margin-bottom: 1rem;">Record patient communication for accurate documentation</p>', unsafe_allow_html=True)

audio_file = st.audio_input("Record patient voice", label_visibility="collapsed")
st.markdown('</div>', unsafe_allow_html=True)

# Processing Section
if audio_file is not None:
    # Read bytes from the UploadedFile object
    audio_bytes = audio_file.read()
    
    # Display audio player in a card
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    st.markdown('<p class="section-subheader">üîä Recorded Audio</p>', unsafe_allow_html=True)
    st.audio(audio_bytes, format="audio/wav")
    st.markdown('</div>', unsafe_allow_html=True)

    # Processing with spinner
    with st.spinner("üîÑ Processing audio with AI transcription..."):
        try:
            # Save audio to temporary file
            with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmp_file:
                tmp_file.write(audio_bytes)
                tmp_file_path = tmp_file.name

            options = {}
            if selected_language_code is not None:
                options["language"] = selected_language_code

            transcription = model.transcribe(tmp_file_path, **options)
            detected_language = transcription.get("language")
            
            # Get timestamp
            timestamp = datetime.now().strftime("%I:%M %p")
            
            # Store in session state
            st.session_state.current_transcription = transcription["text"]
            st.session_state.current_language = selected_language_name if selected_language_code else detected_language.upper()
            st.session_state.timestamp = timestamp

            # Display Results in Medical Chat Format
            st.markdown('<hr class="result-divider">', unsafe_allow_html=True)
            st.markdown('<div class="result-container">', unsafe_allow_html=True)
            
            # Language Badge
            if selected_language_code:
                st.markdown(f'<span class="language-badge">üó£Ô∏è {selected_language_name} ‚Ä¢ {timestamp}</span>', unsafe_allow_html=True)
            else:
                st.markdown(f'<span class="language-badge">üó£Ô∏è Detected: {detected_language.upper()} ‚Ä¢ {timestamp}</span>', unsafe_allow_html=True)
            
            # Original Transcription - Patient Message Style
            st.markdown('<div class="transcription-box">', unsafe_allow_html=True)
            st.markdown("**üìù Patient Communication (Original Language):**")
            st.markdown(f'<div style="padding: 0.5rem 0; font-size: 1.05rem; line-height: 1.7;">{transcription["text"]}</div>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)

            # Translation Section
            translation_text = None
            if selected_language_code != "en" and selected_language_code is not None:
                with st.spinner("üåê Translating to English for medical documentation..."):
                    translation = model.transcribe(tmp_file_path, task="translate", **options)
                    translation_text = translation["text"]
                    st.session_state.current_translation = translation_text
                
                st.markdown('<span class="language-badge">üá¨üáß English Translation ‚Ä¢ {}</span>'.format(timestamp), unsafe_allow_html=True)
                st.markdown('<div class="translation-box">', unsafe_allow_html=True)
                st.markdown("**üåê English Translation (For Medical Records):**")
                st.markdown(f'<div style="padding: 0.5rem 0; font-size: 1.05rem; line-height: 1.7;">{translation_text}</div>', unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
                
            elif selected_language_code is None and detected_language != "en":
                with st.spinner("üåê Translating to English for medical documentation..."):
                    translation = model.transcribe(tmp_file_path, task="translate")
                    translation_text = translation["text"]
                    st.session_state.current_translation = translation_text
                
                st.markdown('<span class="language-badge">üá¨üáß English Translation ‚Ä¢ {}</span>'.format(timestamp), unsafe_allow_html=True)
                st.markdown('<div class="translation-box">', unsafe_allow_html=True)
                st.markdown("**üåê English Translation (For Medical Records):**")
                st.markdown(f'<div style="padding: 0.5rem 0; font-size: 1.05rem; line-height: 1.7;">{translation_text}</div>', unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
            else:
                st.session_state.current_translation = transcription["text"]
            
            st.markdown('</div>', unsafe_allow_html=True)

            # Clean up temporary file
            os.unlink(tmp_file_path)
            
            # Success message
            st.success("‚úÖ Transcription completed successfully! Ready for medical documentation.")
            
            # Action buttons
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                if st.button("ü§ñ Send to Agent", use_container_width=True):
                    st.session_state.send_to_agent = True
                        
            with col2:
                # Generate PDF
                pdf_bytes = generate_pdf(
                    st.session_state.current_transcription,
                    st.session_state.current_translation,
                    st.session_state.current_language,
                    st.session_state.timestamp
                )
                
                st.download_button(
                    label="üìÑ Download PDF",
                    data=pdf_bytes,
                    file_name=f"medical_transcription_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                    mime="application/pdf",
                    use_container_width=True
                )
            
            with col3:
                if st.button("üìã Copy Text", use_container_width=True):
                    st.session_state.show_copy_text = True
            
            with col4:
                if st.button("üîÑ New Recording", use_container_width=True):
                    st.session_state.current_transcription = None
                    st.session_state.current_translation = None
                    st.session_state.current_language = None
                    st.session_state.timestamp = None
                    st.rerun()
            
            # Render the code box below all four buttons, full width
            if st.session_state.get("show_copy_text", False):
                # copy_text = f"Original: {st.session_state.current_transcription}"
                # if st.session_state.current_translation != st.session_state.current_transcription:
                copy_text = f"Translation: {st.session_state.current_translation}"
                st.code(copy_text, language=None)
                st.info("üí° Text displayed above - copy from the box")
            
            if st.session_state.get("send_to_agent", False):
                agent_api_url = "http://127.0.0.1:8000/chat"  # Replace with actual endpoint

                # Use the English translation if available, else original transcription
                payload_text = st.session_state.get("current_translation") or st.session_state.get("current_transcription")
                payload = { "message": payload_text, "session_id": st.session_state.session_id }

                try:
                    response = requests.post(agent_api_url, json=payload, timeout=30)
                    response.raise_for_status()
                    result = response.json()
                    agent_output = result.get("output", result)
                    st.markdown("**ü§ñ Agent Response:**")
                    # st.markdown(f"<div style='padding: 0.5rem 0; font-size: 1.05rem; line-height: 1.7;'> </div>", unsafe_allow_html=True)
                    if "session_id" in result and result["session_id"] and st.session_state.session_id is None:
                        st.session_state.session_id = result["session_id"]

                    if 'chat_history' not in st.session_state:
                        st.session_state.chat_history = []

                    # When a new interaction occurs
                    st.session_state.chat_history.append({
                        "role": "user",
                        "text": st.session_state.current_transcription,
                        "timestamp": st.session_state.timestamp,
                        "session_id": st.session_state.session_id
                    })
                    if agent_output:
                        st.session_state.chat_history.append({
                            "role": "agent",
                            "text": result["response"],
                            "timestamp": datetime.now().strftime("%I:%M %p"),
                            "session_id": st.session_state.session_id
                        })

                    # Display conversation turns
                    for turn in st.session_state.chat_history:
                        if turn['role'] == 'user':
                            st.markdown(f"**Patient:** {turn['text']}")
                        else:
                            st.markdown(f"**Assistant:** {turn['text']}")

                    # Suggest next action after agent reply
                    if agent_output:
                        st.info("üí° Would you like to record a follow-up or add more symptoms?")

                    if st.button("Record another message", use_container_width=True):
                        # Reset input for next message in same session
                        st.session_state.current_transcription = None
                        st.session_state.current_translation = None
                        st.session_state.timestamp = None
                        st.rerun()
                except Exception as e:
                    st.error(f"Agent API call failed: {e}")

            

        except Exception as e:
            st.error(f"‚ùå Transcription error: {e}")
            st.markdown('<div class="info-card">', unsafe_allow_html=True)
            st.markdown("**Troubleshooting Tips:**")
            st.markdown("""
            - Ensure audio quality is clear
            - Check microphone permissions
            - Try recording again
            - Contact IT support if issue persists
            """)
            st.markdown('</div>', unsafe_allow_html=True)

else:
    # Initial state - helpful info
    st.markdown('<div class="info-card">', unsafe_allow_html=True)
    st.markdown("### üëã Welcome to Healthcare Voice Assistant")
    st.markdown("""
    This tool helps healthcare providers communicate with patients in multiple languages:
    
    - **Real-time transcription** of patient communications
    - **Automatic translation** to English for documentation
    - **30+ languages** supported
    - **PDF export** for medical records
    - **Secure & HIPAA compliant** processing
    
    Click the microphone button above to begin recording patient communication.
    """)
    st.markdown('</div>', unsafe_allow_html=True)

# Footer
st.markdown("---")
st.markdown(
    '<div class="footer-text">üè• Healthcare Voice Assistant v2.0 | <span class="footer-badge">Powered by OpenAI Whisper</span> | <span class="footer-badge">HIPAA Compliant</span></div>',
    unsafe_allow_html=True
)